#!/bin/bash

exec 2>&1

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the errand script
source /var/vcap/jobs/sanity-test-broker/helpers/ctl_setup.sh 'sanity-test-broker'
export PATH=/var/vcap/jobs/sanity-test-broker/bin:$PATH

<%
  broker = link("servicebroker")
  protocol = broker.p("protocol", broker.p("ssl_enabled", false) ? "https" : "http")
  username = broker.p("username")
  password = broker.p("password")
  host = broker.p("external_host", broker.instances.first.address)
  uri = "#{protocol}://#{username}:#{password}@#{host}"
  redacted_uri = "#{protocol}://#{username}:REDACTED@#{host}"
  broker.if_p("port") do |broker_port|
    uri += ":#{broker_port}"
    redacted_uri += ":#{broker_port}"
  end

  services = broker.p("services")
  service_names = services.map {|s| s["name"]}.join(",")
%>
export broker_uri=<%= uri %>
export redacted_uri=<%= redacted_uri %>

echo Pinging $redacted_uri/v2/catalog for service names...
curl -s $broker_uri/v2/catalog | jq -r ".services | map(.name) | join(\",\")"
service_names=$(curl -s $broker_uri/v2/catalog | jq -r ".services | map(.name) | join(\",\")")

echo Testing <%= service_names %> == $service_names
if [[ "$service_names" != "<%= service_names %>" ]]; then
  echo "Failed"
  exit 1
else
  echo "Ok"
fi

catalog=$(curl -sf ${broker_uri}/v2/catalog)
service_ids=$(echo $catalog | jq -r ".services[].id")
for service_id in ${service_ids[@]}; do
  service_name=$(echo $catalog | jq -r ".services[] | select(.id == \"$service_id\").name")
  plan_ids=$(echo $catalog | jq -r ".services[] | select(.id == \"$service_id\").plans[].id")
  for plan_id in ${plan_ids[@]}; do
    plan_name=$(echo $catalog | jq -r ".services[] | select(.id == \"$service_id\").plans[] | select(.id == \"$plan_id\").name")
    instance_id=T-$(date +"%s" | rev)
    binding_id=B-$(date +"%s" | rev)
    unset uri

    echo Provisioning service $service_name / $plan_name as $instance_id/$binding_id...
    credentials=$(create-service $service_id $plan_id $instance_id $binding_id)
    echo $credentials | head -c50

    echo Deprovisioning service $service_name / $plan_name ...
    delete-service $service_id $plan_id $instance_id $binding_id
  done
done
