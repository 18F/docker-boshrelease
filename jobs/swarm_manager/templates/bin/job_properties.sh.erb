#!/usr/bin/env bash

#
# Swarm Manager properties
#

# Directory to store the Swarm Manager configuration files
export SWARM_MANAGER_CONF_DIR=${JOB_DIR}/config

# Directory to store the Swarm Manager logs
export SWARM_MANAGER_LOG_DIR=${LOG_DIR}

# Directory to store the Swarm Manager process IDs
export SWARM_MANAGER_PID_DIR=${RUN_DIR}

# Directory to store the Swarm Manager data files
export SWARM_MANAGER_STORE_DIR=${STORE_DIR}

# Directory to store the Swarm Manager temp files
export SWARM_MANAGER_TMP_DIR=${TMP_DIR}

# User which will own the Swarm Manager services
export SWARM_MANAGER_USER="<%= p('swarm_manager.user') %>"

# Group which will own the Swarm Manager services
export SWARM_MANAGER_GROUP="<%= p('swarm_manager.group') %>"

# Enable debug mode
export SWARM_MANAGER_DEBUG="--debug=<%= p('swarm_manager.debug') %>"

# Log level
export SWARM_MANAGER_LOG_LEVEL="--log-level=<%= p('swarm_manager.log_level') %>"

# IP:Port to listen on
export SWARM_MANAGER_HOST="--host=<%= p('swarm_manager.listen_address') %>:<%= p('swarm_manager.port') %>"

# Placement strategy to use
export SWARM_MANAGER_STRATEGY="--strategy=<%= p('swarm_manager.strategy') %>"

# Filters to use
export SWARM_MANAGER_FILTERS="<%= p('swarm_manager.filters', []).map { |filter| "--filter=#{filter}" }.join(' ') %>"

# Time in second between each heartbeat
export SWARM_MANAGER_HEARTBEAT="--heartbeat=<%= p('swarm_manager.heartbeat') %>"

# Enable CORS headers in the remote API
export SWARM_MANAGER_API_ENABLE_CORS="--api-enable-cors=<%= p('swarm_manager.api_enable_cors') %>"

# Overcommit to apply on resources
export SWARM_MANAGER_OVERCOMMIT="--cluster-opt=swarm.overcommit=<%= p('swarm_manager.overcommit') %>"

# Use TLS
export SWARM_MANAGER_TLS="--tls=<%= p('docker.tls') %>"

<% if_p('docker.tls_cacert') do |tls_cacert| %>
# Trust only remotes providing a certificate signed by the CA given here
export SWARM_MANAGER_TLS_CACERT="--tlscacert=${SWARM_MANAGER_CONF_DIR}/docker.cacert"
<% end %>

<% if_p('docker.tls_cert') do |tls_cert| %>
# Path to TLS certificate file
export SWARM_MANAGER_TLS_CERT="--tlscert=${SWARM_MANAGER_CONF_DIR}/docker.cert"
<% end %>

<% if_p('docker.tls_key') do |tls_key| %>
# Path to TLS key file
export SWARM_MANAGER_TLS_KEY="--tlskey=${SWARM_MANAGER_CONF_DIR}/docker.key"
<% end %>

<% if p('docker.tls_verify', false) %>
# Use TLS and verify the remote
export SWARM_MANAGER_TLS_VERIFY="--tlsverify=true"
<% end %>

# Docker nodes
export SWARM_MANAGER_NODES="nodes://<%= p('swarm_manager.docker_nodes').map { |node| "#{node}:#{p('docker.tcp_port')}" }.join(',') %>"

#
# Remote Syslog properties
#

# Directory to store the Remote Syslog configuration files
export REMOTE_SYSLOG_CONF_DIR=${JOB_DIR}/config

# Directory to store the Remote Syslog logs
export REMOTE_SYSLOG_LOG_DIR=${LOG_DIR}

# Directory to store the Remote Syslog process IDs
export REMOTE_SYSLOG_PID_DIR=${RUN_DIR}

# Directory to store the Remote Syslog data files
export REMOTE_SYSLOG_STORE_DIR=${STORE_DIR}

# Directory to store the Remote Syslog temp files
export REMOTE_SYSLOG_TMP_DIR=${TMP_DIR}

# User which will own the Remote Syslog services
export REMOTE_SYSLOG_USER="<%= p('remote_syslog.user') %>"

# Group which will own the Remote Syslog services
export REMOTE_SYSLOG_GROUP="<%= p('remote_syslog.group') %>"

# How often to check for new files
export REMOTE_SYSLOG_NEW_FILE_CHECK_INTERVAL="<%= p('remote_syslog.new_file_check_interval') %>"

<% if p('remote_syslog.debug') %>
# Write a debug file
export REMOTE_SYSLOG_DEBUG="--debug-log-cfg=${REMOTE_SYSLOG_LOG_DIR}/swarm_manager_remote_syslog_debug.log"
<% end %>
