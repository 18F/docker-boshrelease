#!/usr/bin/env bash

#
# Containers properties
#

# Directory to store the Containers configuration files
export CONTAINERS_CONF_DIR=$JOB_DIR/config

# Directory to store the Containers logs
export CONTAINERS_LOG_DIR=$LOG_DIR

# Directory to store the Containers process IDs
export CONTAINERS_PID_DIR=$RUN_DIR

# Directory to store the Containers data files
export CONTAINERS_STORE_DIR=$STORE_DIR

# Directory to store the Containers temp files
export CONTAINERS_TMP_DIR=$TMP_DIR

# User which will own the Docker services
export DOCKER_USER="<%= p('docker.user') %>"

# Group which will own the Docker services
export DOCKER_GROUP="<%= p('docker.group') %>"


<% p('containers').each do |container| %>
#
# "<%= container['name'] %>" properties
#

# Name of the Docker image to create/run
export <%= container['name'] %>_image="<%= container['image'] %>"

<% if container['command'] %>
# Command to the run (including arguments)
export <%= container['name'] %>_command="<%= container['command'] %>"
<% end %>

# Give extended privileges to this container
<% privileged = container.has_key?('privileged') ? container['privileged'] : false %>
export <%= container['name'] %>_privileged="--privileged=<%= privileged %>"

<% if container['entrypoint'] %>
# Overwrite the default entrypoint set by the image
export <%= container['name'] %>_entrypoint="--entrypoint <%= container['entrypoint'] %>"
<% end %>

<% if container['workdir'] %>
# Working directory inside the container
export <%= container['name'] %>_workdir="--workdir <%= container['workdir'] %>"
<% end %>

<% if container['user'] %>
# Username or UID to run the first process
export <%= container['name'] %>_user="--user <%= container['user'] %>"
<% end %>

<% if container['cpu_shares'] %>
# CPU shares (relative weight)
export <%= container['name'] %>_cpu_shares="--cpu-shares <%= container['cpu_shares'] %>"
<% end %>

<% if !container['memory'].nil? && !container['memory'].empty? %>
# Memory limit (format: <number><optional unit>, where unit = b, k, m or g)
export <%= container['name'] %>_memory="--memory <%= container['memory'] %>"
<% end %>

<% unless container['expose_ports'].nil? || container['expose_ports'].empty? %>
<% exposed_ports = container['expose_ports'].map { |ports| "--expose #{ports}" }.join(' ') %>
# Expose a port from the container without publishing it to your host
export <%= container['name'] %>_expose="<%= exposed_ports %>"
<% end %>

<% unless container['bind_ports'].nil? || container['bind_ports'].empty? %>
<% bind_ports = Array(container['bind_ports']).join(",").split(",").map(&:strip).map { |ports| "--publish #{ports}" }.join(' ') %>
# Map a network port to the container
export <%= container['name'] %>_publish="<%= bind_ports %>"
<% end %>

<% unless container['volumes'].nil? || container['volumes'].empty? %>
<% volumes = container['volumes'].map { |vol| "--volume #{vol}" }.join(' ') %>
# Bind mount a volume
export <%= container['name'] %>_volumes="<%= volumes %>"
<% end %>

<% unless container['bind_volumes'].nil? || container['bind_volumes'].empty? %>
<% bind_volumes = Array(container['bind_volumes']).join(",").split(",").map(&:strip).map { |vol| "--volume $CONTAINERS_STORE_DIR/#{container['name']}:#{vol}" }.join(' ') %>
# Create a bind mount to a directory
export <%= container['name'] %>_bind_volumes="<%= bind_volumes %>"
<% end %>

<% unless container['volumes_from'].nil? || container['volumes_from'].empty? %>
<% volumes_from = container['volumes_from'].map { |container| "--volumes-from #{container}" }.join(' ') %>
# Mount volumes from the specified container(s)
export <%= container['name'] %>_volumes_from="<%= volumes_from %>"
<% end %>

<% unless container['links'].nil? || container['links'].empty? %>
<% links = container['links'].map { |link| "--link #{link}" }.join(' ') %>
# Add link to another container (name:alias)
export <%= container['name'] %>_links="<%= links %>"
<% end %>

<% unless container['env_vars'].nil? || container['env_vars'].empty? %>
<% env_vars = Array(container['env_vars']).join(",").split(",").map(&:strip).map { |var| "--env #{var}" }.join(' ') %>
# Set environment variables
export <%= container['name'] %>_env="<%= env_vars %>"
<% end %>

<% if container['dockerfile'] %>
# Dockerfile
mkdir -p "${CONTAINERS_CONF_DIR}"/<%= container['name'] %>
cat > "${CONTAINERS_CONF_DIR}"/<%= container['name'] %>/Dockerfile <<DOCKERFILE
<%= container['dockerfile'] %>
DOCKERFILE
<% end %>
<% end %>
