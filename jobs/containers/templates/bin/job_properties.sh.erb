#!/usr/bin/env bash

#
# Containers properties
#

# Directory to store the Containers configuration files
export CONTAINERS_CONF_DIR=${JOB_DIR}/config

# Directory to store the Containers logs
export CONTAINERS_LOG_DIR=${LOG_DIR}

# Directory to store the Containers process IDs
export CONTAINERS_PID_DIR=${RUN_DIR}

# Directory to store the Containers data files
export CONTAINERS_STORE_DIR=${STORE_DIR}

# Directory to store the Containers temp files
export CONTAINERS_TMP_DIR=${TMP_DIR}

# User which will own the Docker services
export DOCKER_USER="<%= p('docker.user') %>"

# Group which will own the Docker services
export DOCKER_GROUP="<%= p('docker.group') %>"

#
# Remote Syslog properties
#

# Directory to store the Remote Syslog configuration files
export REMOTE_SYSLOG_CONF_DIR=${JOB_DIR}/config

# Directory to store the Remote Syslog logs
export REMOTE_SYSLOG_LOG_DIR=${LOG_DIR}

# Directory to store the Remote Syslog process IDs
export REMOTE_SYSLOG_PID_DIR=${RUN_DIR}

# Directory to store the Remote Syslog data files
export REMOTE_SYSLOG_STORE_DIR=${STORE_DIR}

# Directory to store the Remote Syslog temp files
export REMOTE_SYSLOG_TMP_DIR=${TMP_DIR}

# User which will own the Remote Syslog services
export REMOTE_SYSLOG_USER="<%= p('remote_syslog.user') %>"

# Group which will own the Remote Syslog services
export REMOTE_SYSLOG_GROUP="<%= p('remote_syslog.group') %>"

# How often to check for new files
export REMOTE_SYSLOG_NEW_FILE_CHECK_INTERVAL="<%= p('remote_syslog.new_file_check_interval') %>"

<% if p('remote_syslog.debug') %>
# Write a debug file
export REMOTE_SYSLOG_DEBUG="--debug-log-cfg=${REMOTE_SYSLOG_LOG_DIR}/containers_remote_syslog_debug.log"
<% end %>

<% p('containers').each do |container| %>
#
# "<%= container['name'] %>" properties
#

# Name of the Docker image to create/run
export <%= container['name'] %>_image="<%= container['image'] %>"

<% if container['command'] %>
# Command to the run (including arguments)
export <%= container['name'] %>_command="<%= container['command'] %>"
<% end %>

# Give extended privileges to this container
<% privileged = container.has_key?('privileged') ? container['privileged'] : false %>
export <%= container['name'] %>_privileged="--privileged=<%= privileged %>"

<% if container['entrypoint'] %>
# Overwrite the default entrypoint set by the image
export <%= container['name'] %>_entrypoint="--entrypoint=<%= container['entrypoint'] %>"
<% end %>

<% if container['workdir'] %>
# Working directory inside the container
export <%= container['name'] %>_workdir="--workdir=<%= container['workdir'] %>"
<% end %>

<% if container['restart'] %>
# Restart policy to apply when a container exitsr
export <%= container['name'] %>_restart="--restart=<%= container['restart'] %>"
<% end %>

<% if container['user'] %>
# Username or UID to run the first process
export <%= container['name'] %>_user="--user=<%= container['user'] %>"
<% end %>

<% if container['cpu_shares'] %>
# CPU shares (relative weight)
export <%= container['name'] %>_cpu_shares="--cpu-shares=<%= container['cpu_shares'] %>"
<% end %>

<% unless container['memory'].nil? || container['memory'].empty? %>
# Memory limit (format: <number><optional unit>, where unit = b, k, m or g)
export <%= container['name'] %>_memory="--memory=<%= container['memory'] %>"
<% end %>

<% unless container['expose_ports'].nil? || container['expose_ports'].empty? %>
<% exposed_ports = container['expose_ports'].map { |ports| "--expose=#{ports}" }.join(' ') %>
# Expose a port from the container without publishing it to your host
export <%= container['name'] %>_expose="<%= exposed_ports %>"
<% end %>

<% unless container['bind_ports'].nil? || container['bind_ports'].empty? %>
<% bind_ports = Array(container['bind_ports']).join(',').split(',').map { |ports| "--publish=#{ports.strip}" }.join(' ') %>
# Map a network port to the container
export <%= container['name'] %>_publish="<%= bind_ports %>"
<% end %>

<% unless container['volumes'].nil? || container['volumes'].empty? %>
<% volumes = container['volumes'].map { |vol| "--volume=#{vol}" }.join(' ') %>
# Bind mount a volume
export <%= container['name'] %>_volumes="<%= volumes %>"
<% end %>

<% unless container['bind_volumes'].nil? || container['bind_volumes'].empty? %>
<% bind_volumes = Array(container['bind_volumes']).join(',').split(',').map { |vol| "--volume=$CONTAINERS_STORE_DIR/#{container['name']}:#{vol.strip}" }.join(' ') %>
# Create a bind mount to a directory
export <%= container['name'] %>_bind_volumes="<%= bind_volumes %>"
<% end %>

<% unless container['volumes_from'].nil? || container['volumes_from'].empty? %>
<% volumes_from = container['volumes_from'].map { |container| "--volumes-from=#{container}" }.join(' ') %>
# Mount volumes from the specified container(s)
export <%= container['name'] %>_volumes_from="<%= volumes_from %>"
<% end %>

<% unless container['devices'].nil? || container['devices'].empty? %>
<% devices = container['devices'].map { |device| "--device=#{device}" }.join(' ') %>
# Host devices to add to the container
export <%= container['name'] %>_devices="<%= devices %>"
<% end %>

<% unless container['links'].nil? || container['links'].empty? %>
<% links = container['links'].map { |link| "--link=#{link}" }.join(' ') %>
# Add link to another container (name:alias)
export <%= container['name'] %>_links="<%= links %>"
<% end %>

<% unless container['env_vars'].nil? || container['env_vars'].empty? %>
<% env_vars = Array(container['env_vars']).join(',').split(',').map { |var| "--env #{var.strip}" }.join(' ') %>
# Set environment variables
export <%= container['name'] %>_env="<%= env_vars %>"
<% end %>

<% unless container['cap_adds'].nil? || container['cap_adds'].empty? %>
<% cap_adds = Array(container['cap_adds']).join(',').split(',').map { |cap_add| "--cap-add=#{cap_add.strip}" }.join(' ') %>
# Set Linux capabilities to add
export <%= container['name'] %>_cap_adds="<%= cap_adds %>"
<% end %>

<% unless container['cap_drops'].nil? || container['cap_drops'].empty? %>
<% cap_drops = Array(container['cap_drops']).join(',').split(',').map { |cap_drop| "--cap-drop=#{cap_drop.strip}" }.join(' ') %>
# Set Linux capabilities to drop
export <%= container['name'] %>_cap_drops="<%= cap_drops %>"
<% end %>

<% if container['dockerfile'] %>
# Dockerfile
mkdir -p "${CONTAINERS_CONF_DIR}"/<%= container['name'] %>
cat > "${CONTAINERS_CONF_DIR}"/<%= container['name'] %>/Dockerfile <<DOCKERFILE
<%= container['dockerfile'] %>
DOCKERFILE
<% end %>
<% end %>
