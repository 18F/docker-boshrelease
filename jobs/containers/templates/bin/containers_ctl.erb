#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status

container_name=$2

# Setup common env vars and folders
source /var/vcap/packages/bosh-helpers/ctl_setup.sh 'containers' "${container_name}"
export CONTAINER_PID_FILE=${CONTAINERS_PID_DIR}/${container_name}.pid

case $1 in

  start)
    pid_guard ${CONTAINER_PID_FILE} ${JOB_NAME}
    echo $$ > ${CONTAINER_PID_FILE}

    # Stop and remove previously Docker Container if exists
    docker -H unix:///var/vcap/sys/run/docker/docker.sock stop ${container_name} || true
    docker -H unix:///var/vcap/sys/run/docker/docker.sock rm ${container_name} || true

    # Create Container persistent disk path
    if [ ! -d ${CONTAINERS_STORE_DIR}/${container_name} ]; then
      mkdir -p ${CONTAINERS_STORE_DIR}/${container_name}
      chmod 777 ${CONTAINERS_STORE_DIR}/${container_name}
    fi

    # Build the Docker image from Dockerfile
    if [ -a "${CONTAINERS_CONF_DIR}/${container_name}/Dockerfile" ]; then
        image=$(docker -H unix:///var/vcap/sys/run/docker/docker.sock images | grep "$(eval echo "\$${container_name}_image")") || true
        if [ -z "${image}" ]; then
            docker \
                -H unix:///var/vcap/sys/run/docker/docker.sock \
                build -t "$(eval echo "\$${container_name}_image")" ${CONTAINERS_CONF_DIR}/${container_name} \
                >>${LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
                2>>${LOG_DIR}/${OUTPUT_LABEL}.stderr.log
        fi
    fi

    # Start Docker container
    docker_command="docker --host unix:///var/vcap/sys/run/docker/docker.sock \
                    run --detach \
                    --name ${container_name} \
                    "$(eval echo "\$${container_name}_privileged")" \
                    "$(eval echo "\$${container_name}_net")" \
                    "$(eval echo "\$${container_name}_entrypoint")" \
                    "$(eval echo "\$${container_name}_workdir")" \
                    "$(eval echo "\$${container_name}_restart")" \
                    "$(eval echo "\$${container_name}_user")" \
                    "$(eval echo "\$${container_name}_cpu_shares")" \
                    "$(eval echo "\$${container_name}_memory")" \
                    "$(eval echo "\$${container_name}_memory_swap")" \
                    "$(eval echo "\$${container_name}_expose")" \
                    "$(eval echo "\$${container_name}_publish")" \
                    "$(eval echo "\$${container_name}_volumes")" \
                    "$(eval echo "\$${container_name}_bind_volumes")" \
                    "$(eval echo "\$${container_name}_volumes_from")" \
                    "$(eval echo "\$${container_name}_devices")" \
                    "$(eval echo "\$${container_name}_links")" \
                    "$(eval echo "\$${container_name}_env")" \
                    "$(eval echo "\$${container_name}_cap_adds")" \
                    "$(eval echo "\$${container_name}_cap_drops")" \
                    "$(eval echo "\$${container_name}_mac_address")" \
                    "$(eval echo "\$${container_name}_hostname")" \
                    "$(eval echo "\$${container_name}_labels")" \
                    "$(eval echo "\$${container_name}_ulimits")" \
                    "$(eval echo "\$${container_name}_image")" \
                    "$(eval echo "\$${container_name}_command")""
    echo "$(date) Running command: ${docker_command}"
    ${docker_command} \
        >>${LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
        2>>${LOG_DIR}/${OUTPUT_LABEL}.stderr.log

    # Grab Container process pid
    pid_process=$(docker -H unix:///var/vcap/sys/run/docker/docker.sock inspect -f '{{ .State.Pid }}' ${container_name})
    echo $pid_process > ${CONTAINER_PID_FILE}
    ;;

  stop)
    # Stop and remove Docker Container
    docker -H unix:///var/vcap/sys/run/docker/docker.sock stop ${container_name} || true
    docker -H unix:///var/vcap/sys/run/docker/docker.sock rm ${container_name} || true
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
