#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status

container_name=$2

# Setup common env vars and folders
source /var/vcap/packages/bosh-helpers/ctl_setup.sh 'containers' "${container_name}"
export CONTAINER_PID_FILE=$CONTAINERS_PID_DIR/${container_name}.pid
export CONTAINER_ID_FILE=$CONTAINERS_PID_DIR/${container_name}.id

case $1 in

  start)
    pid_guard $CONTAINER_PID_FILE $JOB_NAME
    echo $$ > $CONTAINER_PID_FILE

    # Create Docker user & group
    create_group $DOCKER_GROUP
    create_user $DOCKER_USER $DOCKER_GROUP

    # Stop and remove previously Docker Container if exists
    chpst -u $DOCKER_USER:$DOCKER_GROUP docker \
        -H unix:///var/vcap/sys/run/docker/docker.sock stop ${container_name} || true
    chpst -u $DOCKER_USER:$DOCKER_GROUP docker \
        -H unix:///var/vcap/sys/run/docker/docker.sock rm ${container_name} || true
    rm $CONTAINER_ID_FILE || true

    # Create Container persistent disk path
    if [ ! -d $CONTAINERS_STORE_DIR/${container_name} ]; then
      mkdir -p $CONTAINERS_STORE_DIR/${container_name}
      chown $DOCKER_USER:$DOCKER_GROUP $CONTAINERS_STORE_DIR/${container_name}
      chmod 777 $CONTAINERS_STORE_DIR/${container_name}
    fi

    # Build the Docker image from Dockerfile
    if [ -a "${CONTAINERS_CONF_DIR}/${container_name}/Dockerfile" ]; then
        image=$(chpst -u $DOCKER_USER:$DOCKER_GROUP docker -H unix:///var/vcap/sys/run/docker/docker.sock images | grep "$(eval echo "\$${container_name}_image")") || true
        if [ -z "$image" ]; then
            chown -R $DOCKER_USER:$DOCKER_GROUP ${CONTAINERS_CONF_DIR}/${container_name}
            chpst -u $DOCKER_USER:$DOCKER_GROUP docker \
                -H unix:///var/vcap/sys/run/docker/docker.sock \
                build -t "$(eval echo "\$${container_name}_image")" ${CONTAINERS_CONF_DIR}/${container_name} \
                >>$LOG_DIR/$OUTPUT_LABEL.stdout.log \
                2>>$LOG_DIR/$OUTPUT_LABEL.stderr.log
        fi
    fi

    # Start Docker container
    docker_command="docker --host unix:///var/vcap/sys/run/docker/docker.sock \
                    run --detach \
                    --name ${container_name} \
                    --cidfile=$CONTAINER_ID_FILE \
                    "$(eval echo "\$${container_name}_entrypoint")" \
                    "$(eval echo "\$${container_name}_cpu_shares")" \
                    "$(eval echo "\$${container_name}_memory")" \
                    "$(eval echo "\$${container_name}_publish")" \
                    "$(eval echo "\$${container_name}_volumes")" \
                    "$(eval echo "\$${container_name}_links")" \
                    "$(eval echo "\$${container_name}_env")" \
                    "$(eval echo "\$${container_name}_image")" \
                    "$(eval echo "\$${container_name}_command")""
    echo "$(date) Running command: ${docker_command}"
    chpst -u $DOCKER_USER:$DOCKER_GROUP ${docker_command} \
        >>$LOG_DIR/$OUTPUT_LABEL.stdout.log \
        2>>$LOG_DIR/$OUTPUT_LABEL.stderr.log

    # Grab Container process pid
    container_id=$(cat $CONTAINER_ID_FILE)
    pid_process=$(chpst -u $DOCKER_USER:$DOCKER_GROUP docker -H unix:///var/vcap/sys/run/docker/docker.sock inspect $container_id | grep Pid | awk '{ gsub(",", ""); print $2 }')
    echo $pid_process > $CONTAINER_PID_FILE
    ;;

  stop)
    # Stop and remove Docker Container
    chpst -u $DOCKER_USER:$DOCKER_GROUP docker \
        -H unix:///var/vcap/sys/run/docker/docker.sock stop ${container_name} || true
    chpst -u $DOCKER_USER:$DOCKER_GROUP docker \
        -H unix:///var/vcap/sys/run/docker/docker.sock rm ${container_name} || true
    kill_and_wait $CONTAINER_PID_FILE
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
