---
resources:
- name: boshrelease
  type: git
  source:
    uri: git@github.com:cloudfoundry-community/docker-boshrelease.git
    branch: (( grab meta.pipeline-branch ))
    private_key: (( grab meta.github-private-key ))

- name: boshrelease-trigger
  type: git
  source:
    uri: git@github.com:cloudfoundry-community/docker-boshrelease.git
    branch: (( grab meta.pipeline-branch ))
    private_key: (( grab meta.github-private-key ))
    paths: [config/blobs.yml, packages/**/*, packages/*, jobs/*, jobs/**/*, src/**/*, src/*]

- name: boshrelease-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry-community/docker-boshrelease.git
    branch: (( grab meta.pipeline-branch ))
    private_key: (( grab meta.github-private-key ))

- name: version
  type: semver
  source:
    driver: git
    initial_version: 30.0.0
    uri: git@github.com:cloudfoundry-community/docker-boshrelease.git
    branch: version
    file: version
    private_key: (( grab meta.github-private-key ))

- name: candidate-release
  type: s3
  source:
    bucket: docker-boshrelease
    regexp: docker-(.*).tgz
    access_key_id: (( grab meta.cfcommunity-aws-access ))
    secret_access_key: (( grab meta.cfcommunity-aws-secret ))
    region_name: (( grab meta.cfcommunity-aws-region ))

- name: github-release-prerelease
  type: github-release
  source:
    access_token: (( grab meta.github-release-access-token ))
    user: cloudfoundry-community
    repository: docker-boshrelease
    drafts: true
    pre_release: true

- name: github-release
  type: github-release
  source:
    access_token: (( grab meta.github-release-access-token ))
    user: cloudfoundry-community
    repository: docker-boshrelease
    drafts: true

jobs:
- name: rc
  public: true
  serial_groups: [version]
  plan:
  - aggregate:
    - {get: boshrelease}
    - {get: boshrelease-trigger, trigger: true, params: {skip_download: true}}
    - {get: version, params: {pre: rc}}
  - put: version
    params: {file: version/number}

- name: bosh-rc
  public: true
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [rc], trigger: true}
    - {get: version, passed: [rc], trigger: true}
  - task: create-candidate-release
    file: boshrelease-ci/ci/tasks/create-candidate-release.yml
  - put: candidate-release
    params: {file: candidate-release/docker-*.tgz}
  - task: bosh2-upload-release
    file: boshrelease-ci/ci/tasks/bosh2-upload-release.yml
    params:
      BOSH_ENVIRONMENT: (( grab meta.bosh-lite-testflight.bosh_environment ))
      BOSH_CA_CERT: (( grab meta.bosh-lite-testflight.bosh_ca_cert ))
      BOSH_CLIENT: (( grab meta.bosh-lite-testflight.bosh_client ))
      BOSH_CLIENT_SECRET: (( grab meta.bosh-lite-testflight.bosh_client_secret ))

- name: testflight-containers
  public: true
  serial_groups: [deployment-containers]
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [bosh-rc], trigger: true}
    - {get: version, passed: [bosh-rc], trigger: true}
    - {get: candidate-release, passed: [bosh-rc], trigger: true}
  - task: bosh2-deploy
    file: boshrelease-ci/ci/tasks/bosh2-deploy.yml
    params:
      BOSH_ENVIRONMENT: (( grab meta.bosh-lite-testflight.bosh_environment ))
      BOSH_CA_CERT: (( grab meta.bosh-lite-testflight.bosh_ca_cert ))
      BOSH_CLIENT: (( grab meta.bosh-lite-testflight.bosh_client ))
      BOSH_CLIENT_SECRET: (( grab meta.bosh-lite-testflight.bosh_client_secret ))
      BOSH_DEPLOYMENT: testflight-containers-example
      base_manifest: manifests/containers/example.yml

- name: testflight-broker
  public: true
  serial_groups: [deployment-broker]
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [bosh-rc], trigger: true}
    - {get: version, passed: [bosh-rc], trigger: true}
    - {get: candidate-release, passed: [bosh-rc], trigger: true}
  - task: basic-deploy
    file: boshrelease-ci/ci/tasks/bosh2-deploy.yml
    params:
      BOSH_ENVIRONMENT: (( grab meta.bosh-lite-testflight.bosh_environment ))
      BOSH_CA_CERT: (( grab meta.bosh-lite-testflight.bosh_ca_cert ))
      BOSH_CLIENT: (( grab meta.bosh-lite-testflight.bosh_client ))
      BOSH_CLIENT_SECRET: (( grab meta.bosh-lite-testflight.bosh_client_secret ))
      BOSH_DEPLOYMENT: testflight-docker-broker
      op_patch_files: manifests/broker/services/op-mysql56.yml,manifests/broker/services/op-redis32.yml,manifests/broker/services/op-postgresql96.yml
      base_manifest: manifests/broker/docker-broker.yml
  - task: deploy-with-cf-integration
    file: boshrelease-ci/ci/tasks/bosh2-deploy.yml
    params:
      BOSH_ENVIRONMENT: (( grab meta.bosh-lite-testflight.bosh_environment ))
      BOSH_CA_CERT: (( grab meta.bosh-lite-testflight.bosh_ca_cert ))
      BOSH_CLIENT: (( grab meta.bosh-lite-testflight.bosh_client ))
      BOSH_CLIENT_SECRET: (( grab meta.bosh-lite-testflight.bosh_client_secret ))
      BOSH_DEPLOYMENT: testflight-docker-broker
      base_manifest: manifests/broker/docker-broker.yml
      op_patch_files: manifests/broker/op-cf-integration.yml,manifests/broker/services/op-mysql56.yml,manifests/broker/services/op-redis32.yml,manifests/broker/services/op-postgresql96.yml
      cf_api_url: (( grab meta.bosh-lite-testflight.cf_api_url ))
      cf_skip_ssl_validation: (( grab meta.bosh-lite-testflight.cf_skip_ssl_validation ))
      cf_admin_username: (( grab meta.bosh-lite-testflight.cf_admin_username ))
      cf_admin_password: (( grab meta.bosh-lite-testflight.cf_admin_password ))
  - task: register-broker
    file: boshrelease-ci/ci/tasks/bosh2-errand.yml
    params:
      BOSH_ENVIRONMENT: (( grab meta.bosh-lite-testflight.bosh_environment ))
      BOSH_CA_CERT: (( grab meta.bosh-lite-testflight.bosh_ca_cert ))
      BOSH_CLIENT: (( grab meta.bosh-lite-testflight.bosh_client ))
      BOSH_CLIENT_SECRET: (( grab meta.bosh-lite-testflight.bosh_client_secret ))
      BOSH_DEPLOYMENT: testflight-docker-broker
      errand: broker-registrar
  - task: sanity-test
    file: boshrelease-ci/ci/tasks/bosh2-errand.yml
    params:
      BOSH_ENVIRONMENT: (( grab meta.bosh-lite-testflight.bosh_environment ))
      BOSH_CA_CERT: (( grab meta.bosh-lite-testflight.bosh_ca_cert ))
      BOSH_CLIENT: (( grab meta.bosh-lite-testflight.bosh_client ))
      BOSH_CLIENT_SECRET: (( grab meta.bosh-lite-testflight.bosh_client_secret ))
      BOSH_DEPLOYMENT: testflight-docker-broker
      errand: sanity-test

- name: testflight-swarm
  public: true
  serial_groups: [deployment-swarm]
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [bosh-rc], trigger: true}
    - {get: version, passed: [bosh-rc], trigger: true}
    - {get: candidate-release, passed: [bosh-rc], trigger: true}
  - task: bosh2-deploy
    file: boshrelease-ci/ci/tasks/bosh2-deploy.yml
    params:
      BOSH_ENVIRONMENT: (( grab meta.bosh-lite-testflight.bosh_environment ))
      BOSH_CA_CERT: (( grab meta.bosh-lite-testflight.bosh_ca_cert ))
      BOSH_CLIENT: (( grab meta.bosh-lite-testflight.bosh_client ))
      BOSH_CLIENT_SECRET: (( grab meta.bosh-lite-testflight.bosh_client_secret ))
      BOSH_DEPLOYMENT: testflight-docker-swarm
      base_manifest: manifests/swarm/docker-swarm.yml

- name: shipit-rc
  serial_groups: [version]
  public: true
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [testflight-containers, testflight-broker, testflight-swarm]}
    - {get: candidate-release, passed: [testflight-containers, testflight-broker, testflight-swarm]}
    - {get: version, passed: [testflight-containers, testflight-broker, testflight-swarm]}
  - task: create-final-release
    file: boshrelease-ci/ci/tasks/finalize-release.yml
    params:
      aws_access_key_id: (( grab meta.cfcommunity-aws-access ))
      aws_secret_access_key: (( grab meta.cfcommunity-aws-secret ))
  - put: boshrelease
    params:
      repository: final-release-repo
      rebase: true
  - task: create-release-notes
    file: boshrelease-ci/ci/tasks/create-release-notes.yml
  - put: version
    params: {file: version/number}
  - task: generate-commitish
    config:
      platform: linux
      image: docker:///dingotiles/dingo-postgresql-release-pipeline
      inputs: [{name: boshrelease}]
      outputs: [{name: generated-commitish}]
      run:
        path: sh
        args:
        - -c
        - |
          git -C boshrelease rev-parse HEAD > generated-commitish/commitish
  - put: github-release-prerelease
    params:
      name: release-notes/release-name
      tag: release-notes/release-name
      body: release-notes/notes.md
      commitish: generated-commitish/commitish
      globs:
      - final-release-tarball/*.tgz

- name: shipit
  serial_groups: [version]
  public: true
  plan:
  - aggregate:
    - {get: boshrelease-ci}
    - {get: boshrelease, passed: [testflight-containers, testflight-broker, testflight-swarm]}
    - {get: candidate-release, passed: [testflight-containers, testflight-broker, testflight-swarm]}
    - {get: version, passed: [testflight-containers, testflight-broker, testflight-swarm], params: {bump: final}}
  - task: create-final-release
    file: boshrelease-ci/ci/tasks/finalize-release.yml
    params:
      aws_access_key_id: (( grab meta.cfcommunity-aws-access ))
      aws_secret_access_key: (( grab meta.cfcommunity-aws-secret ))
  - put: boshrelease
    params:
      repository: final-release-repo
      rebase: true
  - task: create-release-notes
    file: boshrelease-ci/ci/tasks/create-release-notes.yml
  - put: version
    params: {file: version/number}
  - task: generate-commitish
    config:
      platform: linux
      image: docker:///dingotiles/dingo-postgresql-release-pipeline
      inputs: [{name: boshrelease}]
      outputs: [{name: generated-commitish}]
      run:
        path: sh
        args:
        - -c
        - |
          git -C boshrelease rev-parse HEAD > generated-commitish/commitish
  - put: github-release
    params:
      name: release-notes/release-name
      tag: release-notes/release-name
      body: release-notes/notes.md
      commitish: generated-commitish/commitish
      globs:
      - final-release-tarball/*.tgz
